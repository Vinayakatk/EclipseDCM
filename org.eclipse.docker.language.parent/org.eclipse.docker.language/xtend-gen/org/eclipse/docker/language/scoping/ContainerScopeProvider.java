/**
 * generated by Xtext 2.9.1
 */
package org.eclipse.docker.language.scoping;

import com.google.common.base.Objects;
import org.eclipse.docker.language.container.Container;
import org.eclipse.docker.language.container.ContainerPackage;
import org.eclipse.docker.language.container.ContainerSection;
import org.eclipse.docker.language.container.Docker;
import org.eclipse.docker.language.scoping.AbstractContainerScopeProvider;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class ContainerScopeProvider extends AbstractContainerScopeProvider {
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    IScope _xblockexpression = null;
    {
      IScope scope = super.getScope(context, reference);
      EReference _runContainerDefination_Sequence = ContainerPackage.eINSTANCE.getRunContainerDefination_Sequence();
      boolean _equals = Objects.equal(reference, _runContainerDefination_Sequence);
      if (_equals) {
        EObject _rootContainer = EcoreUtil2.getRootContainer(context);
        ContainerSection _containerRegion = ((Docker) _rootContainer).getContainerRegion();
        EList<Container> containers = _containerRegion.getContainers();
        return Scopes.scopeFor(containers, scope);
      }
      _xblockexpression = scope;
    }
    return _xblockexpression;
  }
}
