/**
 * generated by Xtext 2.9.1
 */
package org.eclipse.docker.language.container.impl;

import java.util.Collection;

import org.eclipse.docker.language.container.ContainerPackage;
import org.eclipse.docker.language.container.RunContainerDefination;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Run Container Defination</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.eclipse.docker.language.container.impl.RunContainerDefinationImpl#getSequence <em>Sequence</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RunContainerDefinationImpl extends MinimalEObjectImpl.Container implements RunContainerDefination
{
  /**
   * The cached value of the '{@link #getSequence() <em>Sequence</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSequence()
   * @generated
   * @ordered
   */
  protected EList<org.eclipse.docker.language.container.Container> sequence;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RunContainerDefinationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ContainerPackage.Literals.RUN_CONTAINER_DEFINATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<org.eclipse.docker.language.container.Container> getSequence()
  {
    if (sequence == null)
    {
      sequence = new EObjectResolvingEList<org.eclipse.docker.language.container.Container>(org.eclipse.docker.language.container.Container.class, this, ContainerPackage.RUN_CONTAINER_DEFINATION__SEQUENCE);
    }
    return sequence;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ContainerPackage.RUN_CONTAINER_DEFINATION__SEQUENCE:
        return getSequence();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ContainerPackage.RUN_CONTAINER_DEFINATION__SEQUENCE:
        getSequence().clear();
        getSequence().addAll((Collection<? extends org.eclipse.docker.language.container.Container>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ContainerPackage.RUN_CONTAINER_DEFINATION__SEQUENCE:
        getSequence().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ContainerPackage.RUN_CONTAINER_DEFINATION__SEQUENCE:
        return sequence != null && !sequence.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //RunContainerDefinationImpl
