/*
 * generated by Xtext
 */
package org.eclipse.docker.language

import java.util.Properties
import javax.inject.Named
import org.eclipse.docker.language.container.Docker
import org.eclipse.docker.language.container.impl.DockerImpl
import org.eclipse.docker.language.transformation.ContainerTransformation
import org.eclipse.xtext.scoping.IGlobalScopeProvider
import org.eclipse.xtext.scoping.impl.ImportUriGlobalScopeProvider
import com.github.dockerjava.api.DockerClient
import com.google.common.eventbus.EventBus
import com.google.inject.Binder
import com.google.inject.Scope
import com.google.inject.Scopes
import com.google.inject.internal.BindingBuilder

/** 
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 */
class ContainerRuntimeModule extends org.eclipse.docker.language.AbstractContainerRuntimeModule {
	override void configure(Binder binder) {
		binder.bind(DockerInterpreter).to(DockerInterpreterImpl)
		binder.bind(DockerClient).toProvider(DockerClientProvider)
		binder.bind(EventBus).in(Scopes.SINGLETON)
		binder.bind(ContainerTransformation).in(Scopes.SINGLETON)
		binder.bind(Docker).to(DockerImpl).in(Scopes.SINGLETON)
		super.configure(binder)
	}

	override Class<? extends IGlobalScopeProvider> bindIGlobalScopeProvider() {
		return ImportUriGlobalScopeProvider
	}

	override void configureIScopeProviderDelegate(Binder binder) {
		binder.bind(org.eclipse.xtext.scoping.IScopeProvider).annotatedWith(
			com.google.inject.name.Names.named(
				org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider.NAMED_DELEGATE)).to(
			org.eclipse.xtext.scoping.impl.ImportedNamespaceAwareLocalScopeProvider)
	}
}
